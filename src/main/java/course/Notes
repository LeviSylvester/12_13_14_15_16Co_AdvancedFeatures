INTERFACES
-interfete ex. si cu clase complet neinrudite vs clase abstracte ex. shape
-keyword implements
-poti defini metode abstracte dar dupa aceea nu le poti suprascrie
-o interfata este un protocol cu un set de metode
-adjective sau verbe care sa-ti duca gandul la un comportament
-3 metode care pot fi implementate: metode abstracta (camp, .., lista de parametri), metode default, metode statice
-ex. in Shapes
-o interfata poate sa extinda o alta interfata
-metodele default tin de instanta (de clasa)
-cand vrem sa definim mai multe clase care au acelasi comportament sau un protocol ex. toate pot fi colorabile (serializable(transform to bytearray))
-deci cand sunt mai multe clase neinrudite, dar au acelasi comportament
-ex vapor masina toate sunt drivable, park
-o clasa poate sa textinda o alta clasa si sa implementeze o interfata
-class implements
-class extends
-interface implements
-oriunde e vizibila interfata e vizibil si campul respectiv ex. DEFAULT_COLOUR_CODE

NESTED CLASSES
-outer/inner
-sa fie public
Static (static nested classes are used, the rest very rarely)
Inner classes
-non-static member inside another class
Local inner classes
-defined inside a method
Anonymous Inner Classes
-declared without name

EXCEPTIONS
-nu-i prevazuta sa fie in flow-ul normal al programului
-throwable (clasa Throwable - Exception, Error)
-nu-i best practice prinderea erorilor
-tip checked=compile-time and unchecked=run-time
Errors should not be handled bhy application (not checked at compile time)
-syntax try-catch-finally
-finally e dupa catch dar inainte de throw
-exceptia aruncata in clasa subscrisa trebuie sa fie o exceptie subscrisa a exceptiei din clasa parinte

ENUM
-un mod de a pune impreuna un set de constante
-syntax public enum ...
-e o clasa, cu singurele instante... practic final
-ex. la ip-uri(adresa) si port-uri(camrea), nu vrei sa fie instantiat inc-o conexiune
-clasa abstracta, generica extinsa in clasa cu enum-urile care vrem noi
-implicitly public, static, final -> cannot be extended

COLLECTIONS (definite prin interfete) (ca fara interfete sunt si array-urile)
-set de date puse in aceeasi structura (de acelasi tip)
-see diagram of structures from pdf
-(acum: liste, queue, set si map)
List
-can contain duplicates
-add, remove, get, set
-ArrayList - resizable array, fast for search but slow for ins/del
-LinkedList - doubly linked list, fast for ins/del, but slow for search
Queue
-ArrayQeque - resizable array with double-ended queue functionality
-PriorityQueue - coada ordonata ((stiva): last in, first out(stack); coada: first in first out(tube))
Set
-does not allow duplicates
-implementations TreeSet*, HashSet*, LinkedHashSet* *see pdf
-Hash table: tabel de dispersie
Map (in functie de ordinea naturala a key-urilor)
-treemap, hashmap,  hashtable (does not allow null keys), hashlinkedmap (tine cont de ordinea in care au fost inserate key-urile)

INPUT/OUTPUT
1.System.in ex. System.in.read()
2.System.out ex. sout
3.System.err ex. System.err.println cannot read

tema: pt fisiere .txt date ca parametri de intrare, sa tipareasca continutul lor






















