INTERFACES
-interfete ex. si cu clase complet neinrudite vs clase abstracte ex. shape
-keyword implements
-poti defini metode abstracte dar dupa aceea nu le poti suprascrie
-o interfata este un protocol cu un set de metode
-adjective sau verbe care sa-ti duca gandul la un comportament
-3 metode care pot fi implementate: metode abstracta (camp, .., lista de parametri), metode default, metode statice
-ex. in Shapes
-o interfata poate sa extinda o alta interfata
-metodele default tin de instanta (de clasa)
-cand vrem sa definim mai multe clase care au acelasi comportament sau un protocol ex. toate pot fi colorabile (serializable(transform to bytearray))
-deci cand sunt mai multe clase neinrudite, dar au acelasi comportament
-ex vapor masina toate sunt drivable, park
-o clasa poate sa textinda o alta clasa si sa implementeze o interfata
-class implements
-class extends
-interface implements
-oriunde e vizibila interfata e vizibil si campul respectiv ex. DEFAULT_COLOUR_CODE

NESTED CLASSES
-outer/inner
-sa fie public
Static (static nested classes are used, the rest very rarely)
Inner classes
-non-static member inside another class
Local inner classes
-defined inside a method
Anonymous Inner Classes
-declared without name

EXCEPTIONS
-nu-i prevazuta sa fie in flow-ul normal al programului
-throwable (clasa Throwable - Exception, Error)
-nu-i best practice prinderea erorilor
-tip checked=compile-time and unchecked=run-time
Errors should not be handled bhy application (not checked at compile time)
-syntax try-catch-finally
-finally e dupa catch dar inainte de throw
-exceptia aruncata in clasa subscrisa trebuie sa fie o exceptie subscrisa a exceptiei din clasa parinte

ENUM
-un mod de a pune impreuna un set de constante
-syntax public enum ...
-e o clasa, cu singurele instante... practic final
-ex. la ip-uri(adresa) si port-uri(camrea), nu vrei sa fie instantiat inc-o conexiune
-clasa abstracta, generica extinsa in clasa cu enum-urile care vrem noi
-implicitly public, static, final -> cannot be extended

COLLECTIONS (definite prin interfete) (ca fara interfete sunt si array-urile)
-set de date puse in aceeasi structura (de acelasi tip)
-see diagram of structures from pdf
-(acum: liste, queue, set si map)
List
-can contain duplicates
-add, remove, get, set
-ArrayList - resizable array, fast for search but slow for ins/del
-LinkedList - doubly linked list, fast for ins/del, but slow for search
Queue
-ArrayQeque - resizable array with double-ended queue functionality
-PriorityQueue - coada ordonata ((stiva): last in, first out(stack); coada: first in first out(tube))
Set
-does not allow duplicates
-implementations TreeSet*, HashSet*, LinkedHashSet* *see pdf
-Hash table: tabel de dispersie
Map (in functie de ordinea naturala a key-urilor)
-treemap, hashmap,  hashtable (does not allow null keys), hashlinkedmap (tine cont de ordinea in care au fost inserate key-urile)

INPUT/OUTPUT
1.System.in ex. System.in.read()
2.System.out ex. sout
3.System.err ex. System.err.println cannot read

tema: pt fisiere .txt date ca parametri de intrare, sa se tipareasca continutul lor

SERIALIZATION
see class CerializeDesierializeApp

REGEX
look into it correct:
?cel mult odata (sa fie sau nu prezent)
+cel putin odata
*ori de cate ori(?)
|
^o data poate sa fie orice in afara de cele definite deja
ex.^[A-Z]{1}.*[A-Z]$
^ la inceput insemnand aici ca prima litera trebuie sa fie o majuscula
play with regex101.com
https://en.wikipedia.org/wiki/Regular_expression

GENERICS
ne permit sa parametrizam tipul
sa scriem aceeasi metoda pentru oricare din tipuri
task26: Create a method which finds the maximum speed values from a list of Vehicles
generics -> Utils (constructor privat)
task29: Create an enum with constants describing possible engine types and having a description (in Vehicle)

FUNCTIONAL PROGRAMMING
-de la java8
-nu spui cum anume sa se intample, instead ce sa se intample
Lambda (concise representations of an anonymus function)
-nu au nume
-syntax: (list of parameters) -> {instruction}
-does not belong to a class, can be passed around as an argument
-implementation of an interface with a single abstract method
-study table from slide sent by Lucian
//sa cream o metoda care foloseste un consumer care sa proceseze o lista de valori
//lista de valori care trebuie procesata poate sa fie oricare din enumurile definite la engine type si gearbox type
Functional interfaces (complete from side)
Method reference
-referinta spre o metoda
-sintaxa ClassName::methodName
-ne da o facilitate in plus, un alt mod de a scrie ceva
//task36 functional.utils
Optional Class
-cand putem sa avem null-uri ca si rezultat dintr-un proces
-an Optional object encapsulates/wraps a value which might be missing
-private Optional<Insurance> insurance;
1.create an empty optional: Optional<Insurance> insurance = Optional.empty();
2.opt. out of a non-null o.: = Optional.of(car);
3.out of a nullable o.: Optional.ofNullable(car);
-cream de ex. cand vrem sa atragem atentia ca poate sa lipseasca
-unwrapping with methods as seen on slide
Streams
-proceesare colectiilor in a declarative way, ce si nu cum
-pipeline operation on collections
-you can convert any collection to a stream by calling stream() method
-two types of operations made on streams:
1.Intermediate operations - return a stream so other operations can be applied on it (eg map, flatmap, filetr, sorted)
2.Terminal operations - are either void (eg foreach, ifpresent) or return a value (eg collect, findfirst)
-we can stream without start from collections:
-Stream.of() sau IntStream,range() etc.

JAVA CONCURRENCY
-rularea proceselor (threads) in paralel
-dif dintre paralelism si concurenta:
-concurenta: nu impartim acelasi resurse
-paralelism: se intampla in acelasi memorie
-ideal ar fi in aceeasi memorie si independent unul de celalalt
-2 ways to create threads:
-extending Thread class, suprascriem metoda run (nu o pornim, doar o definim) see ex. slide
-psvm is the creation of the main thread
-thread is called with start() method, de vazut celelalte elemente de pe slide
Thread synchronization
-threads work with shared memory
-multiple threads might try concurrently to modify data ->race condition
-critical section is the section of code which is accessed for modif by more than one thread ex. coffee machine app
-Synchronized keyword: to have an expected behaviour
-Synchronized methods; sync. blocks
-ce nu trebuie sinc, nu sincroniza, ca sa nu scazi performanta programnului